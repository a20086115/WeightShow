/*
 * @Author: YuWenqiang
 * @Date: 2025-02-24 18:31:34
 * @Description: 
 * 
 */

// Âú® Node.js È°πÁõÆÁöÑÊ†πÁõÆÂΩï‰∏ãÔºå‰ΩøÁî® npm Êàñ yarn ÂÆâË£ÖÊâÄÈúÄÁöÑÂåÖÔºö
// npm i @cloudbase/js-sdk@next
// npm i @cloudbase/adapter-node

// ÂºïÂÖ• SDKÔºåËøôÈáåÊàë‰ª¨ÂºïÂÖ•‰∫ÜÂÆåÊï¥ÁöÑ clousebase-js-sdkÔºå‰πüÊîØÊåÅÂàÜÊ®°ÂùóÂºïÂÖ•
const cloudbase = require("@cloudbase/js-sdk");
// ÂºïÂÖ• node.js Á´ØÁöÑÈÄÇÈÖçÂô®ÔºåËØ¶ÊÉÖËØ∑ÂèÇËÄÉ https://docs.cloudbase.net/api-reference/webv3/adapter#%E4%B8%80%E5%A5%97%E4%BB%A3%E7%A0%81%E5%A4%9A%E7%AB%AF%E9%80%82%E9%85%8D
const adapter = require("@cloudbase/adapter-node");
const { sessionStorage } = adapter.genAdapter();
cloudbase.useAdapters(adapter);
const app = cloudbase.init({
  env: "release-ba24f3", // ÈúÄÊõøÊç¢‰∏∫ÂÆûÈôÖ‰ΩøÁî®ÁéØÂ¢É id
});
/**
 * auth ÂàùÂßãÂåñÁöÑÊó∂ÂÄôË¶Å‰º†ÂÖ•storage Âíå captchaOptions.openURIWithCallback
 * Âê¶Âàô‰ºöÁî®ÈªòËÆ§ÁöÑÔºå‰æùËµñ‰∫éÂπ≥Âè∞ÔºåÂú® nodejs ÁéØÂ¢ÉÊä•Èîô
 */
const auth = app.auth({
  storage: sessionStorage,
  captchaOptions: {
    openURIWithCallback: () =>
      console.log("open uri with callback"),
  },
});

// ‰∫ëÂáΩÊï∞ÂÖ•Âè£Êñá‰ª∂
const cloud = require('wx-server-sdk')

cloud.init()
const db = cloud.database()

// ‰∫ëÂáΩÊï∞ÂÖ•Âè£ÂáΩÊï∞
exports.main = async (event, context) => {
  const { pkId = 'c69c6e4c67bc6929033282c0167851e5' } = event;
  
  // Ëß£Êûê event.body
  const bodyParams = {};
  if (event.body) {
    event.body.split('&').forEach(pair => {
      const [key, value] = pair.split('=');
      bodyParams[key] = decodeURIComponent(value || '');
    });
  }
  console.log('Ëß£ÊûêÂêéÁöÑbodyÂèÇÊï∞Ôºö', bodyParams);

  try {
    // Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÂíåÂ∞èÊó∂
    const now = new Date();
    const currentHour = (now.getUTCHours() + 8) % 24; // Ë∞ÉÊï¥‰∏∫‰∏≠ÂõΩÊ†áÂáÜÊó∂Èó¥
    const today = new Date(now.getTime() + 8 * 60 * 60 * 1000).toISOString().split('T')[0];
    const currentMonth = today.slice(0, 7);

    let messageType = '';
    // Ê†πÊçÆÊó∂Èó¥ÊÆµÁ°ÆÂÆöÊ∂àÊÅØÁ±ªÂûã
    if (currentHour >= 8 && currentHour < 10) {
      messageType = 'morning';
    } else if (currentHour >= 10 && currentHour < 18) {
      messageType = 'daytime';
    } else if (currentHour >= 20 && currentHour < 21) {
      messageType = 'evening_reminder';
    } else if (currentHour >= 21) {
      messageType = 'daily_report';
    }
    console.log('ÂàùÂßãÊ∂àÊÅØÁ±ªÂûãÔºö', messageType);

    // Ê†πÊçÆ content ÂÜÖÂÆπÂà§Êñ≠Ê∂àÊÅØÁ±ªÂûã
    if (bodyParams.content) {
      console.log('Ê£ÄÊµãÂà∞contentÂèÇÊï∞ÔºåÂÜÖÂÆπÔºö', bodyParams.content);
      bodyParams.content = decodeUnicode(bodyParams.content)
      if (bodyParams.content.startsWith('ÁªüËÆ°')) {
        messageType = 'total_report';
      } else if (bodyParams.content.startsWith('Âè£Âè∑')) {
        messageType = 'morning';
      } else if (bodyParams.content.startsWith('Ëß£Á≠î')) {
        messageType = 'ai_answer';
      } else if (bodyParams.content.startsWith('Êó•Êä•')) {
        messageType = 'daily_report';
      } else{
        bodyParams.content = ''
      }
      console.log('Ê†πÊçÆcontentÊõ¥Êñ∞ÂêéÁöÑÊ∂àÊÅØÁ±ªÂûãÔºö', messageType);
    }

    // Â¶ÇÊûú‰∏çÂú®‰ªª‰ΩïÊ∂àÊÅØÊó∂Èó¥ÊÆµÂÜÖ‰∏îÊ≤°ÊúâÁâπÂÆöÂÜÖÂÆπÔºåËøîÂõûÁ©∫Ê∂àÊÅØ
    if (!messageType && !bodyParams.content) {
      console.log('Êó†ÊúâÊïàÊ∂àÊÅØÁ±ªÂûãÔºåËøîÂõûÁ©∫Ê∂àÊÅØ');
      return JSON.stringify({
        rs: 1,
        tip: "",
        end: 0
      });
    }

    // Ê£ÄÊü•‰ªäÂ§©ËØ•Á±ªÂûãÁöÑÊ∂àÊÅØÊòØÂê¶Â∑≤Êé®ÈÄÅÔºà‰ªÖÂΩìÊ≤°ÊúâcontentÂèÇÊï∞Êó∂Ê£ÄÊü•Ôºâ
    if (!bodyParams.content) {
      const pushRecord = await db.collection('pushRecords').where({
        pkId: pkId,
        pushDate: today,
        messageType: messageType
      }).get();
      console.log('Êé®ÈÄÅËÆ∞ÂΩïÊü•ËØ¢ÁªìÊûúÔºö', pushRecord);

      if (pushRecord.data.length > 0) {
        console.log('ËØ•Á±ªÂûãÊ∂àÊÅØ‰ªäÊó•Â∑≤Êé®ÈÄÅÔºåËøîÂõûÁ©∫Ê∂àÊÅØ');
        return JSON.stringify({
          rs: 1,
          tip: "",
          end: 0
        });
      }
    }

    // Êü•ËØ¢PKÈõÜÂêà
    const pkRes = await db.collection('pk').where({
      _id: pkId
    }).get();

    if (pkRes.data.length === 0) {
      console.error('Êú™ÊâæÂà∞PKËµõ‰ø°ÊÅØ');
      return JSON.stringify({
        rs: 1,
        tip: "Êú™ÊâæÂà∞PKËµõ‰ø°ÊÅØ",
        end: 0
      });
    }

    let members = pkRes.data[0].members;
    const openIds = members.map(member => member.openId);

    // ÊâπÈáèÊü•ËØ¢Áî®Êà∑‰ø°ÊÅØ
    const userResults = await db.collection('users').where({
      openId: db.command.in(openIds)
    }).get();

    // ÂêàÂπ∂Áî®Êà∑‰ø°ÊÅØ
    members = members.map(member => {
      const userInfo = userResults.data.find(user => user.openId === member.openId) || {};
      return { ...member, ...userInfo };
    });

    // Êü•ËØ¢‰ªäÊó•ÊâìÂç°ËÆ∞ÂΩï
    const todayRecords = await db.collection('records').where({
      openId: db.command.in(openIds),
      date: today
    }).get();

    // Âü∫Á°ÄÁªüËÆ°Êï∞ÊçÆ
    const totalMembers = members.length;
    const completedMembers = todayRecords.data.length;
    const completionRate = (completedMembers / totalMembers) * 100;

    let message = '';
    if (messageType === 'morning') {
      const aiMessage = await callAi('ÁîüÊàê‰ªäÊó•ÂáèËÇ•ÊàòÈòüÂÆ£Ë®Ä');
      message = {
        rs: 1,
        tip: "\UE04A„Äê‰ªäÊó•ÊàòÈòüÂÆ£Ë®Ä„Äë\n" + aiMessage,
        end: 0
      };
    } else if (messageType === 'daytime') {
      message = {
        rs: 1,
        tip: "\UE315„ÄêÁßëÂ≠¶ÂáèËÑÇÂ∞èËØæÂ†Ç„Äë\nÈ•øÁöÑÊó∂ÂÄôÂÖàÂñùÊ∞¥ÔºÅ\n‚ùóÔ∏èÁ†îÁ©∂ÂèëÁé∞Ôºö67%ÁöÑ'È••È•øÊÑü'ÂÆû‰∏∫ËÑ±Ê∞¥ÔºÅ",
        end: 0
      };
    } else if (messageType === 'evening_reminder') {
      message = {
        rs: 1,
        tip: `\UE02D„ÄêÊï∞ÊçÆÂΩïÂÖ•ÂÄíËÆ°Êó∂„Äë\n‰ªäÊó•ËøòÂâ©5Â∞èÊó∂ËÆ∞ÂΩï‰ΩìÈáçÔºÅ\n \UE032 ÂΩìÂâç${completedMembers}/${totalMembers}‰∫∫Â∑≤ÂÆåÊàêÔºåËææ${completionRate.toFixed(2)}%Ëß£ÈîÅÊòéÊó•Âõ¢ÈòüÂ£ÅÁ∫∏ÔºÅ`,
        end: 0
      };
    } else if (messageType === 'daily_report') {
      // ÁÆÄÂçïÁöÑÊØèÊó•ÊâìÂç°ÁªüËÆ°
      const simpleDetails = members.map(member => {
        const hasRecord = todayRecords.data.find(record => record.openId === member.openId);
        return `${member.nickName}: ${hasRecord ? 'Â∑≤ÊâìÂç° \UE032' : 'Êú™ÊâìÂç° \UE333'}`;
      }).join('\n');

      message = {
        rs: 1,
        tip: `\\UE11D„Äê‰ªäÊó•ÊàòÊä•„Äë\n ‰ªäÊó•ÊâìÂç°Áéá${completionRate.toFixed(2)}%\n\n${simpleDetails}`,
        end: 0
      };
    } else if (messageType === 'total_report') {
      // ËØ¶ÁªÜÁöÑ‰ΩìÈáçÂèòÂåñÁªüËÆ°
      const weightPromises = members.map(member => {
        return db.collection('records').where({
          openId: member.openId,
          date: db.RegExp({
            regexp: `^${currentMonth}`,
            options: 'i',
          })
        }).orderBy('date', 'asc').get();
      });

      const weightResults = await Promise.all(weightPromises);
      console.log('‰ΩìÈáçËÆ∞ÂΩïÊü•ËØ¢ÁªìÊûúÔºö', weightResults);

      // ÁîüÊàêËØ¶ÁªÜÁªüËÆ°
      const details = members.map((member, index) => {
        const records = weightResults[index].data;
        const currentWeight = records.length > 0 ? records[records.length - 1].weight : 'Êú™Áü•';
        const targetWeight = member.aimWeight || 'Êú™Áü•';

        if (currentWeight === 'Êú™Áü•' || targetWeight === 'Êú™Áü•' || records.length === 0) {
          return `ÂßìÂêç ${member.nickName} ÂΩìÊúàÊâìÂç°Êï∞ÊçÆ `;
        }

        const initialWeight = records[0].weight;
        const yesterdayWeight = records.length > 1 ? records[records.length - 2].weight : currentWeight;
        const totalWeightLoss = (initialWeight - currentWeight).toFixed(2);
        const weightChange = (currentWeight - yesterdayWeight).toFixed(2);
        const totalWeightLossNeeded = initialWeight - targetWeight;
        const completionPercentage = ((initialWeight - currentWeight) / totalWeightLossNeeded * 100).toFixed(2);

        // Ëé∑ÂèñÂΩìÊúàÂ§©Êï∞
        const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
        const currentDayOfMonth = now.getDate();
        const progress = currentWeight <= (initialWeight - (totalWeightLossNeeded / daysInMonth) * currentDayOfMonth) ? 'Ë∂ÖË∂ä' : 'ÊªûÂêé';

        return `ÂßìÂêç ${member.nickName} ÂΩìÂâç‰ΩìÈáç${currentWeight} ‰ªäÊó•ÂèòÂåñ${weightChange} ÊúàÂàù‰ΩìÈáç${initialWeight} ÁõÆÊ†á‰ΩìÈáç${targetWeight} Á¥ØËÆ°ÂáèÈáç${totalWeightLoss} ÁõÆÊ†áÂÆåÊàêÁéá${completionPercentage}% ÁõÆÊ†áÂÆåÊàêËøõÂ∫¶„Äê${progress}„Äë`;
      }).join('\n');

      message = {
        rs: 1,
        tip: `üìä„ÄêÊàòÈòüÊàòÊä•„Äë\nüî•‰ªäÊó•ÊâìÂç°Áéá${completionRate.toFixed(2)}%\n\n${details}`,
        end: 0
      };
    } else if (messageType === 'ai_answer') {
      const aiAnswer = await callAi(bodyParams.content);
      message = {
        rs: 1,
        tip: `üí°„ÄêAIËß£Á≠î„Äë\n${aiAnswer}`,
        end: 0
      };
    }
    console.log('ÁîüÊàêÁöÑÊ∂àÊÅØÂÜÖÂÆπÔºö', message);

    // ‰øùÂ≠òÊé®ÈÄÅËÆ∞ÂΩïÔºà‰ªÖÂΩìÊ≤°ÊúâcontentÂèÇÊï∞Êó∂‰øùÂ≠òÔºâ
    if (!bodyParams.content) {
      const recordData = {
        pkId: pkId,
        pushDate: today,
        messageType: messageType,
        messageContent: message.tip,
        createdAt: db.serverDate()
      };
      console.log('ÂáÜÂ§á‰øùÂ≠òÊé®ÈÄÅËÆ∞ÂΩïÔºö', recordData);
      await db.collection('pushRecords').add({ data: recordData });
    }

    return JSON.stringify(message);

  } catch (error) {
    console.error('ÊâßË°åËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØÔºö', error);
    return JSON.stringify({
      rs: 1,
      tip: `ÈîôËØØÔºö${error.message}`,
      end: 0
    });
  }
}

// AIË∞ÉÁî®ÂáΩÊï∞
async function callAi(content) {
  console.log('ÂºÄÂßãË∞ÉÁî®AIÔºåËæìÂÖ•ÂÜÖÂÆπÔºö', content);
  try {
    await auth.signInAnonymously();
    const ai = await app.ai();
    
    const res = await ai.bot.sendMessage({
      data: {
        botId: "app-er4p84fo",
        msg: content,
        history: [],
      },
    });

    let aiResponse = '';
    for await (let x of res.textStream) {
      aiResponse += x;
    }
    console.log('AIÂõûÁ≠îÂÆåÊàêÔºö', aiResponse);
    return aiResponse;
  } catch (error) {
    console.error("AIË∞ÉÁî®Â§±Ë¥•Ôºö", error);
    throw new Error("AIÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®ÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ");
  }
} 

// Ëß£Á†ÅÂáΩÊï∞
function decodeUnicode(str) {
  // ÊñπÊ≥ï 1ÔºöÈÄöËøá JSON.parse ËΩ¨Êç¢ÔºàÊé®ËçêÔºâ
  const decoded1 = JSON.parse(`"${str.replace(/\\/g, "\\\\")}"`);

  // ÊñπÊ≥ï 2ÔºöÈÄöËøá replace Ê≠£ÂàôËΩ¨Êç¢
  const decoded2 = str.replace(/\\u([\dA-Fa-f]{4})/g, (_, grp) => 
    String.fromCharCode(parseInt(grp, 16))
  );

  return decoded2; // ‰∏§ÁßçÊñπÊ≥ïÁªìÊûú‰∏ÄËá¥
}