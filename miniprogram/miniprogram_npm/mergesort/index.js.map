{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = (function () {\n  \n\n  /**\n   * Sort an array using the merge sort algorithm.\n   *\n   * @param {function} comparatorFn The comparator function.\n   * @param {array} arr The array to sort.\n   * @returns {array} The sorted array.\n   */\n  function mergeSort(comparatorFn, arr) {\n    var len = arr.length, firstHalf, secondHalf;\n    if (len >= 2) {\n      firstHalf = arr.slice(0, len / 2);\n      secondHalf = arr.slice(len / 2, len);\n      return merge(comparatorFn, mergeSort(comparatorFn, firstHalf), mergeSort(comparatorFn, secondHalf));\n    } else {\n      return arr.slice();\n    }\n  }\n\n  /**\n   * The merge part of the merge sort algorithm.\n   *\n   * @param {function} comparatorFn The comparator function.\n   * @param {array} arr1 The first sorted array.\n   * @param {array} arr2 The second sorted array.\n   * @returns {array} The merged and sorted array.\n   */\n  function merge(comparatorFn, arr1, arr2) {\n    var result = [], left1 = arr1.length, left2 = arr2.length;\n    while (left1 > 0 && left2 > 0) {\n      if (comparatorFn(arr1[0], arr2[0]) <= 0) {\n        result.push(arr1.shift());\n        left1--;\n      } else {\n        result.push(arr2.shift());\n        left2--;\n      }\n    }\n    if (left1 > 0) {\n      result.push.apply(result, arr1);\n    } else {\n      result.push.apply(result, arr2);\n    }\n    return result;\n  }\n\n  return mergeSort;\n})();\n"]}