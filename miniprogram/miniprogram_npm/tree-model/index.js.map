{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var mergeSort, findInsertIndex;\nmergeSort = require('mergesort');\nfindInsertIndex = require('find-insert-index');\n\nmodule.exports = (function () {\n  \n\n  var walkStrategies;\n\n  walkStrategies = {};\n\n  function k(result) {\n    return function () {\n      return result;\n    };\n  }\n\n  function TreeModel(config) {\n    config = config || {};\n    this.config = config;\n    this.config.childrenPropertyName = config.childrenPropertyName || 'children';\n    this.config.modelComparatorFn = config.modelComparatorFn;\n  }\n\n  function addChildToNode(node, child) {\n    child.parent = node;\n    node.children.push(child);\n    return child;\n  }\n\n  function Node(config, model) {\n    this.config = config;\n    this.model = model;\n    this.children = [];\n  }\n\n  TreeModel.prototype.parse = function (model) {\n    var i, childCount, node;\n\n    if (!(model instanceof Object)) {\n      throw new TypeError('Model must be of type object.');\n    }\n\n    node = new Node(this.config, model);\n    if (model[this.config.childrenPropertyName] instanceof Array) {\n      if (this.config.modelComparatorFn) {\n        model[this.config.childrenPropertyName] = mergeSort(\n          this.config.modelComparatorFn,\n          model[this.config.childrenPropertyName]);\n      }\n      for (i = 0, childCount = model[this.config.childrenPropertyName].length; i < childCount; i++) {\n        addChildToNode(node, this.parse(model[this.config.childrenPropertyName][i]));\n      }\n    }\n    return node;\n  };\n\n  function hasComparatorFunction(node) {\n    return typeof node.config.modelComparatorFn === 'function';\n  }\n\n  Node.prototype.isRoot = function () {\n    return this.parent === undefined;\n  };\n\n  Node.prototype.hasChildren = function () {\n    return this.children.length > 0;\n  };\n\n  function addChild(self, child, insertIndex) {\n    var index;\n\n    if (!(child instanceof Node)) {\n      throw new TypeError('Child must be of type Node.');\n    }\n\n    child.parent = self;\n    if (!(self.model[self.config.childrenPropertyName] instanceof Array)) {\n      self.model[self.config.childrenPropertyName] = [];\n    }\n\n    if (hasComparatorFunction(self)) {\n      // Find the index to insert the child\n      index = findInsertIndex(\n        self.config.modelComparatorFn,\n        self.model[self.config.childrenPropertyName],\n        child.model);\n\n      // Add to the model children\n      self.model[self.config.childrenPropertyName].splice(index, 0, child.model);\n\n      // Add to the node children\n      self.children.splice(index, 0, child);\n    } else {\n      if (insertIndex === undefined) {\n        self.model[self.config.childrenPropertyName].push(child.model);\n        self.children.push(child);\n      } else {\n        if (insertIndex < 0 || insertIndex > self.children.length) {\n          throw new Error('Invalid index.');\n        }\n        self.model[self.config.childrenPropertyName].splice(insertIndex, 0, child.model);\n        self.children.splice(insertIndex, 0, child);\n      }\n    }\n    return child;\n  }\n\n  Node.prototype.addChild = function (child) {\n    return addChild(this, child);\n  };\n\n  Node.prototype.addChildAtIndex = function (child, index) {\n    if (hasComparatorFunction(this)) {\n      throw new Error('Cannot add child at index when using a comparator function.');\n    }\n\n    return addChild(this, child, index);\n  };\n\n  Node.prototype.setIndex = function (index) {\n    if (hasComparatorFunction(this)) {\n      throw new Error('Cannot set node index when using a comparator function.');\n    }\n\n    if (this.isRoot()) {\n      if (index === 0) {\n        return this;\n      }\n      throw new Error('Invalid index.');\n    }\n\n    if (index < 0 || index >= this.parent.children.length) {\n      throw new Error('Invalid index.');\n    }\n\n    var oldIndex = this.parent.children.indexOf(this);\n\n    this.parent.children.splice(index, 0, this.parent.children.splice(oldIndex, 1)[0]);\n\n    this.parent.model[this.parent.config.childrenPropertyName]\n      .splice(index, 0, this.parent.model[this.parent.config.childrenPropertyName].splice(oldIndex, 1)[0]);\n\n    return this;\n  };\n\n  Node.prototype.getPath = function () {\n    var path = [];\n    (function addToPath(node) {\n      path.unshift(node);\n      if (!node.isRoot()) {\n        addToPath(node.parent);\n      }\n    })(this);\n    return path;\n  };\n\n  Node.prototype.getIndex = function () {\n    if (this.isRoot()) {\n      return 0;\n    }\n    return this.parent.children.indexOf(this);\n  };\n\n  /**\n   * Parse the arguments of traversal functions. These functions can take one optional\n   * first argument which is an options object. If present, this object will be stored\n   * in args.options. The only mandatory argument is the callback function which can\n   * appear in the first or second position (if an options object is given). This\n   * function will be saved to args.fn. The last optional argument is the context on\n   * which the callback function will be called. It will be available in args.ctx.\n   *\n   * @returns Parsed arguments.\n   */\n  function parseArgs() {\n    var args = {};\n    if (arguments.length === 1) {\n      if (typeof arguments[0] === 'function') {\n        args.fn = arguments[0];\n      } else {\n        args.options = arguments[0];\n      }\n    } else if (arguments.length === 2) {\n      if (typeof arguments[0] === 'function') {\n        args.fn = arguments[0];\n        args.ctx = arguments[1];\n      } else {\n        args.options = arguments[0];\n        args.fn = arguments[1];\n      }\n    } else {\n      args.options = arguments[0];\n      args.fn = arguments[1];\n      args.ctx = arguments[2];\n    }\n    args.options = args.options || {};\n    if (!args.options.strategy) {\n      args.options.strategy = 'pre';\n    }\n    if (!walkStrategies[args.options.strategy]) {\n      throw new Error('Unknown tree walk strategy. Valid strategies are \\'pre\\' [default], \\'post\\' and \\'breadth\\'.');\n    }\n    return args;\n  }\n\n  Node.prototype.walk = function () {\n    var args;\n    args = parseArgs.apply(this, arguments);\n    walkStrategies[args.options.strategy].call(this, args.fn, args.ctx);\n  };\n\n  walkStrategies.pre = function depthFirstPreOrder(callback, context) {\n    var i, childCount, keepGoing;\n    keepGoing = callback.call(context, this);\n    for (i = 0, childCount = this.children.length; i < childCount; i++) {\n      if (keepGoing === false) {\n        return false;\n      }\n      keepGoing = depthFirstPreOrder.call(this.children[i], callback, context);\n    }\n    return keepGoing;\n  };\n\n  walkStrategies.post = function depthFirstPostOrder(callback, context) {\n    var i, childCount, keepGoing;\n    for (i = 0, childCount = this.children.length; i < childCount; i++) {\n      keepGoing = depthFirstPostOrder.call(this.children[i], callback, context);\n      if (keepGoing === false) {\n        return false;\n      }\n    }\n    keepGoing = callback.call(context, this);\n    return keepGoing;\n  };\n\n  walkStrategies.breadth = function breadthFirst(callback, context) {\n    var queue = [this];\n    (function processQueue() {\n      var i, childCount, node;\n      if (queue.length === 0) {\n        return;\n      }\n      node = queue.shift();\n      for (i = 0, childCount = node.children.length; i < childCount; i++) {\n        queue.push(node.children[i]);\n      }\n      if (callback.call(context, node) !== false) {\n        processQueue();\n      }\n    })();\n  };\n\n  Node.prototype.all = function () {\n    var args, all = [];\n    args = parseArgs.apply(this, arguments);\n    args.fn = args.fn || k(true);\n    walkStrategies[args.options.strategy].call(this, function (node) {\n      if (args.fn.call(args.ctx, node)) {\n        all.push(node);\n      }\n    }, args.ctx);\n    return all;\n  };\n\n  Node.prototype.first = function () {\n    var args, first;\n    args = parseArgs.apply(this, arguments);\n    args.fn = args.fn || k(true);\n    walkStrategies[args.options.strategy].call(this, function (node) {\n      if (args.fn.call(args.ctx, node)) {\n        first = node;\n        return false;\n      }\n    }, args.ctx);\n    return first;\n  };\n\n  Node.prototype.drop = function () {\n    var indexOfChild;\n    if (!this.isRoot()) {\n      indexOfChild = this.parent.children.indexOf(this);\n      this.parent.children.splice(indexOfChild, 1);\n      this.parent.model[this.config.childrenPropertyName].splice(indexOfChild, 1);\n      this.parent = undefined;\n      delete this.parent;\n    }\n    return this;\n  };\n\n  return TreeModel;\n})();\n"]}